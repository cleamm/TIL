장고: 웹 프레임워크는 웹 프로그램을 좀더 쉽고 빠르게 만들어주는 기반
세션이란 클라이언트와 서버가 연결되어져 있는 것.
쿠키, 세션, 로그인/아웃, DB, 관리자, 보안 등등 처리 필요
sql injection(sql을 실행시키면 로그인됨)

$id = $_REQUEST['id];
$query = "SELECT name, email FROM users WHERE id = '1' or '1'='1'; 이렇게 입력하면 select문이 실행됨;;;
id: test
pw: 1234

관리자아이디 : admin, webmaster, master, .... (주된 기본 아이디)
id: admin
pw : '1' or '1'='1'
"SELECT 로그인성공 FROM users WHERE id="admin" and pw=1234
즉 위와 같은 방식이 된다면 아이디만 알아도 해킹이 되며 관리자 계정에 로그인이 되면 가입자 모두의 정보가 유출될 수 있음.
sql 인젝션에 의한 공격이 보통 해킹순위 1,2위를 다툼

장고는 빠르게 웹을 제작, 유지보수, 관리가 됨
장고는 html, css, javascript는 알아야됨
여기서 사용하는 장고는 4버전

가상환경 설치방법

1. 명령 프롬프트(cmd) 열기
2. 'cd \'(실행후 C드라이브에 있어야됨)
3. mkdir venvs(venvs 폴더생성)
4. cd venvs 
5. python -m venv mysite(가상환경이름) 
6. cd mysite
7. cd Scripts
8. 'activate' 엔터(가상환경 진입)
이때 좌측에 (mysite) 이렇게 되어 있는지 확인
9. 'deactivate' 엔터(가상환경 종료)

프로젝트 진행(참고용: https://wikidocs.net/73306)

1. 장고 프로젝트를 실행할 위치로 이동
(여기서는 cd \ -> mkdir projects -> cd projects)
2. 해당 위치에서 윈도우 기준 'c:\venvs\mysite\Scripts\activate' 작성후 실행
(맥에서는 source /Users/컴퓨터명/venvs/mysite/bin/activate)
위의 과정을 거치면 가상환경 실행전의 위치에서 가상환경에 진입하게 됨
3. mkdir mysite(여기서는 가상환경명으로 생성. 실제는 플젝명으로 할듯)
4. cd mysite
5. django-admin startproject config . 이 문자을 입력
6. dir/w 를 입력하여 파일 확인(1개파일, 3개 디렉터리)
7. python manage.py runserver 실행
이때 화면에 (The install worked successfully! Congratulations!)+로켓이 나와야 함
주소는 127.0.0.1:8000(물리주소:논리주소)


다른 내용

1. win + R 실행
2. sysdm.cpl 입력 (시스템 속성 열기)
3. 고급(탭) - 환경 변수 클릭
4. 사용자 변수의 Path 열기
5. 새로 만들기 - 'c:\venvs' 입력
6. 확인으로 전부 닫음
7. mysite 파일을 처음에 가상환경을 만들었던 폴더(venvs) 안에 넣기
(여기서는 c:\venvs 경로에 mysite.cmd 파일을 위치하도록 설정)
8. 명령프롬프트를 새로 열어서 mysite 입력후 실행 = 가상환경 진입
9. 좌측에 (mysite)로 세팅되었는지 확인
종료는 ctrl + c


파이참 세팅

1. projects - mysite 폴더 열기
2. settings 진입
3. 좌측 리스트에서 Project:mysite - python interpreter 클릭
4. add interpreter 클릭
5. Existing 클릭후 venvs - mysite - Scripts - python.exe 로 설정
6. 이후 확인으로 닫기
7. 파일중 settings.py 열기
8. LANGUAGE_CODE = 'ko-kr', TIME_ZONE = 'Asia/Seoul' 이렇게 수정
위를 진행하면 페이지가 한글로 바뀌며 페이지의 시간대가 한국 시간대로 변경

--------------------------------------------------------------------------------


2일차 (CRUD, 목표: 게시판 만들기 시작)

웹프로그래밍
http 메시지 : 서버와 클라이언트가 주고받는 메시지
http 메시지 구조 : 스타트라인(요청request/응답response), 헤더header, 블랭크blank(빈줄), 바디body(본문)
get/post 방식
get은 주소에 정보가 보이지만 post는 주소에 url이외의 정보가 보이지 않음
get : http://abc.com
post : http://abc.com:80/product?prdid=guest&reqnum=10&...
파이썬은 데이터를 전달할 때 form - POST 방식을 주로 사용함.
웹서버 : 클라이언트의 요청(request)을 처리하고, 결과를 클라이언트에게 응답(response)
웹어플리케이션서버(WAS = Web Application Server) : 웹서버로부터 동적 페이지 요청을 받아, 
요청 처리 및 결과를 웹서버에게 반환
동적페이지 => python, jsp, php, ...
ORM(Object Relational Mapping): 테이블을 모델로 만드므로 DB가 변경되더라도 상관없음.
쿼리문이 아닌 모델을 사용하기 때문.

게시판: 글번호, 제목, 작성자, 작성일, 작성시간, ....
장고는 모델을 이용하여 테이블 생성/수정/삭제 등 작업

질문 테이블(모델)
질문제목, 질문내용, 질문작성일
답변 테이블(모델)
질문, 답변내용, 답변작성일


1. mysite 실행후 django-admin startapp pybo 입력
pybo라는 앱을 생성
2. 127.0.0.1:8000을 실행후 주소뒤에 /pybo까지 입력후 실행
당연히 에러나옴. urls.py에는 pybo가 없음
http://127.0.0.1:8000/pybo : 프론트에 있는 직원에게 pybo(방문대상자) 위치?
=> pybo url에 대한 매핑을 추가해야함(수첩에 pybo를 등록)
3. urls.py에 코드 추가
from pybo import views
urlpatterns 에는
path('pybo/', views.index) 코드를 작성
=> pybo - views 파일 참고
4. pybo - views.py 파일에 코드 작성
from django.http import HttpResponse
def index(request):
    return HttpResponse('반갑습니다')
위 코드를 작성 및 주소에 http://127.0.0.1:8000/pybo 입력 및 확인(반갑습니다가 나와야 함)
5. 이번엔 urls.py의 path('pybo/', views.index)는 주석 후 아래 코드 추가
 from django.urls import include
 path('pybo/', include('pybo.urls'))
6. pybo 폴더 안에 urls.py 파일 생성 후 아래 코드 작성
from django.urls import path
from . import views
urlpatterns = [
    path('', views.index)
]


질문 및 답변 테이블(모델) 만들기

1. pybo폴더의 models.py에 코드 작성

from django.db import models

class Question(models.Model):
    subject = models.CharField(max_length=200)
    content = models.TextField()
    create_date = models.DateTimeField()

class Answer(models.Model):
    question = models.ForeignKey(Question, on_delete=models.CASCADE) # 위의 질문이 삭제되면 답변도 삭제해라
    content = models.TextField()
    create_date = models.DateTimeField()

!! 위 코드에서 Answer 테이블을 작업하면 Question 테이블에 question_id라는 컬럼이 생성됨.
!! 추후에 question_id가 없을 수도 있는데 이게 없는 경우는 Answer가 제대로 작동했는지 등을 확인할 필요있음

2. 코드 작성후 cmd에서 (mysite가 실행된 상태에서) 'python manage.py makemigrations'입력
3. 2번 진행후 python manage.py migrate 작성 및 실행
4. 테이블 생성되었는지 확인

아래(질문, 질문수정, 질문삭제)부터는 명령 프롬프트 작업
질문하기

1. cmd에서 (mysite실행상태) python manage.py shell 을 입력하여 shell상태로 파이썬 실행.
2. from pybo.models import Question, Answer 입력 및 실행
3. from django.utils import timezone 입력 및 실행
4. q = Question(subject='pybo가 무엇인가요?', content='pybo에 대해 알려주세요', create_date=timezone.now()) 코드 입력 및 실행
5. q.save() 입력 및 실행
6. q 실행하면 Question: Question object (1)이라고 나옴.
    6.1. q.id를 입력하면 1이 나옴
7. q = Question(subject='장고 모델 질문', content='id는 자동으로 생성되나요?', create_date=timezone.now()) 코드 입력 및 실행
8. q.save() 입력 및 실행
9. q 실행하면 Question: Question object (2)이라고 나옴.
10. Question.objects.all()을 실행하면 
<QuerySet [<Question: Question object (1)>, <Question: Question object (2)>]>
위와 같이 출력됨
    10.1. Question.objects 실행하면
<django.db.models.manager.Manager object at 0x000002204EB651E0>
위와 같이 출력됨(저장된 메모리 주소인듯)

Q&A 추가 작업
1. models.py 파일에 Question 클래스에 코드 추가
def __str__(self):
    return self.subject
2. cmd에서 ctrl + z 후 엔터를 눌러 shell 종료
3. 다시 python manage.py shell 실행
4. from pybo.models import Question, Answer 입력 및 실행
5. Question.objects.all()을 실행하면 아래와 같이 출력됨
<QuerySet [<Question: pybo가 무엇인가요?>, <Question: 장고 모델 질문>]>
함수가 추가되었을 땐 콘솔만 재실행하면 결과에 반영이 됨
하지만 클래스명같은 것이 변경되면 다시 마이그레이션을 해야 반영이 됨
6. Question.objects.filter(id=1) 이와 같은 코드를 실행하면 id가 1인 것만 출력함.
    6.1. Question.objects.get(id=1) 이 코드도 위와 같은 id가 1인 것을 출력.
    6.2. Question.objects.filter(subject__contains='장고') 이렇게 subject의 입력된 조건 찾기도 가능함
        <QuerySet [<Question: 장고 모델 질문>]>

질문 변경하기
1. q = Question.objects.get(id=2) 입력 및 실행
2. q.subject='Django Model Question' 입력 및 실행
3. q.save() 실행
4. q 실행하여 확인 (Question.objects.all() 이 코드로 전체적으로 어떤 변화있는지 확인)


질문 삭제
1. q = Question.objects.get(id=1)
2. q.delete() 실행
3. Question.objects.all() 실행하여 확인


답변하기

1. q= Question.objects.get(id=2)
2. from Question.utils import timezone
3. a = Answer(question = q, content = '자동 생성됩니다.', create_date = timezone.now())
4. a.save()
5. Answer.objects.all()로 조회
6. a = Answer.objects.get(id=1)
7. a.question으로 답변의 질문 조회(결과 : <Question: Django Model Question>)


관리자 계정 생성
1. cmd에서 (mysite 실행상태에서) python manage.py createsuperuser 입력 및 실행
2. 계정이름을 admin으로 설정
3. 비밀번호는 임시로 1111로 설정
4. 너무짧으며, 일상적이고 전부 숫자인데 그대로 할 거냐고 물으면 y입력
5. 주소창에 127.0.0.1:8000/admin을 입력하면 로그인 창이 열림
6. 관리자 계정을 입력하고 로그인
7. 관리자 계정 로그인 완료

데이터 연동(질문답변 테이블 연동)
1. pybo - admin.py 열기
2. 코드 작성
from .models import Question
admin.site.register(Question)
3. 관리자 페이지 새로고침하면 Questions가 생김
실제 등록까지도 가능한 상태가 됨(기본적으로 어느정도 세팅되어 있음)
4. 관리자 답변 기능 추가 코드 작성
from .models import Question, Answer
admin.site.register(Answer)
5. 답변기능 확인


질문 검색기능 추가(확실히 php보다 훨씬 쉽게 만들어짐;;)
1. 아래 코드 작성후 서버 재실행
class QuestionAdmin(admin.ModelAdmin):
    search_fields = ['subject']
admin.site.register(Question, QuestionAdmin)
admin.site.register(Question) <- (왼쪽 코드 삭제)
2. 정상작동 확인(안되면 서버 재실행 혹은 코드 오타 확인)
이 주소 참고해서 관리자 페이지 관리 가능 (https://docs.djangoproject.com/en/4.0/ref/contrib/admin/)

질문 리스트 가져오기
1. views.py 파일에 코드 작성
(기존에 쓰던 index함수는 주석)
from .models import Question
def index(request):
    question_list = Question.objects.order_by('-create_date')
    context = {'question_list': question_list}
    return render(request, 'pybo/question_list.html', context)

order_by()함수 안에 -를 넣으면 내림차순이 됨(desc)
render(request, 템플릿, 질문리스트(딕셔너리 형식)): 템플릿을 적용해 html로 변환하는 함수

2. settings.py 파일의 TEMPLATES 코드 수정
'DIRS':[BASE_DIR / 'templates'] # BASE_DIR = c:\projects\mysite
3. cmd에서 서버종료 후 mkdir templates 입력 및 실행
4. templates 폴더에 pybo 폴더 생성 후 question_list.html 파일 생성
5. question_list.html 파일에 아래 코드 코드 작성
{% if question_list %}
    <ul>
    {% for question in question_list %}
        <li><a href="/pybo/{{ question.id }}/">{{ question.subject }}</a></li>
    {% endfor %}
    </ul>
{% else %}
    <p>질문이 없습니다.</p>
{% endif %}

위 코드는 템플릿 코드라고 볼 수 있음
현재 링크는 만들어지는데 페이지는 pybo/1~ 이렇게 주소에 접속하므로 현재는 에러를 출력
6. 서버 실행 및 서버 페이지 확인(127.0.0.1:8000/pybo)
접속시 질문 제목이 적혀있어야 함


질문리스트 클릭하여 질문페이지 이동
1. pybo\urls.py 파일의 urlpatterns에 코드 추가
path('<int:question_id>/', views.detail)
2. views.py 안에 함수 추가
def detail(request, question_id):
    question = Question.objects.get(id=question_id)
    context = {'question': question}
    return render(request, 'pybo/question_detail.html', context)
3. pybo폴더 안에 question_detail.html 파일 생성
4. question_detail.html에 코드 추가
<h1>{{ question.subject }}</h1>
<div>
    {{ question.content }}
</div>
5. 페이지 새로고침하여 확인


잘못된 페이지 처리방법
1. views.py에 코드 추가
from django.shortcuts import render, get_object_or_404
(기존 question 변수 주석 후)question = get_object_or_404(Question, pk=question_id)


장고는 다음주까진 할 것

--------------------------------------------------------------------------------

3일차

주소에 별명(alias) 입히기
1. pybo/urls.py 파일에서 urlpatterns 내부 코드 수정
path('', views.index, name='index'),
path('<int:question_id>/', views.detail, name = 'detail')
여기에 사용된 name은 다른 name과 중복되지 않도록 해야됨
2. question_list.html 파일에서 코드 수정
<a href="/pybo/{{ question.id }}/">{{ question.subject }}</a>
위 코드를 아래 코드로..
<a href="{% url 'detail' question_id = question.id %}">{{ question.subject }}</a>
3. pybo/urls.py에서 코드 추가
app_name = 'pybo' # 폴더명 정도로 이해하면 됨(name space라고 부름)
4. question_list.html을 수정
<a href="{% url 'pybo:detail' question_id = question.id %}">{{ question.subject }}</a>
!!!중요사항!!!
여기서 '='에러 나오면 'question_id ='을 삭제하면 해결되던데 원인 모름;;

상세페이지에 답변등록하는 기능추가(=폼(form 태그 사용하기))
1. question_detail.html 파일에 코드 추가
<textarea name="content" id="content" rows="15"></textarea>
<input type="submit" value="답변등록">
위 코드로 입력이 가능하며 등록 버튼만 생김
2. 1번 항목을 감싸는 폼태그 코드 추가
<form action="{% url 'pybo:answer_create' question.id %}" method="post">
{% csrf_token %}
...
</form>
여기서 token 코드는 항상 들어가야 함. 이것이 보안 토큰임
3.pybo\urls.py 의 urlpatterns에 코드 추가
path('answer/create/<int:question_id>/', views.answer_create, name='answer_create')
4. views.py 에 코드 추가
from django.shortcuts import render, get_object_or_404, redirect
from django.utils import timezone
def answer_create(request, question_id):
    question = get_object_or_404(Question, pk=question_id)
    question.answer_set.create(content=request.POST.get('content'), create_date=timezone.now())
    return redirect('pybo:detail', question_id=question.id)
# 이제 답변등록을 누르면 글자가 사라짐
5. question_detail.html의 form태그 위에 코드 추가
<div>
    <ul>
        {% for a in question.answer_set.all %}
            <li>{{ a.content }}</li>
        {% endfor %}
    </ul>
</div>




1. settings.py 파일에서 STATIC_URL 밑에 코드 추가
STATICFILES_DIRS = [BASE_DIR / 'static']
2. cmd에서 서버 종료후 mysite안에 mkdir static 입력 및 실행(폴더 생성)
3. 2번에서 생성한 static 폴더에 style.css파일 생성
4. style.css 파일에 코드 작성.
textarea {
    width: 100%;
}
input[type=submit]{
    margin-top:10px;
}
5. question_detail.py 맨 위에 따로 코드 작성
{% load static %}
<link rel="stylesheet" type="text/css" href="{% static 'style.css' %}">
위 코드는 static에서 style.css 코드를 가져와서 적용한다는 뜻
6. 서버 구동하여 결과 확인
창을 줄이거나 늘리면 입력창도 크기에 맞게 조절됨.

+ https://getbootstrap.com/docs/5.1/getting-started/download/
1. 위 주소에서 'download' 버튼으로 압축파일 다운.
2. 안에서 css 폴더 안에 bootstrap.min.css 파일을 static 폴더에 복사.
3. question_list.html 파일의 코드 전체 삭제 후 아래 코드 작성
{% load static %}
<link rel="stylesheet" type="text/css" href="{% static 'bootstrap.min.css' %}">

<div class="container my-3">
    <table class="table">
        <thead>
        <tr class="table-dark">
            <th>번호</th>
            <th>제목</th>
            <th>작성일시</th>
        </tr>
        </thead>
        <tbody>
        {% if question_list %}
        {% for question in question_list %}
        <tr>
            <td>{{ forloop.counter }}</td>
            <td>
                <a href="{% url 'pybo:detail' question.id %}">{{ question.subject }}</a>
            </td>
            <td>{{ question.create_date }}</td>
        </tr>
        {% endfor %}
        {% else %}
        <tr>
            <td colspan="3">질문이 없습니다.</td>
        </tr>
        {% endif %}
        </tbody>
    </table>
</div>
4. 서버에서 결과 확인


--------------------------------------------------------------------------------

4일차

테이블 생성 : 모델 정의(Question, Answer) -> settings.py 에 installed_apps 항목 추가 -> 마이그레이션 수행
1) 모델 생성/변경 등 작업시: python manage.py makemigrations
2) 테이블 생성: python manage.py migrate
3) 테이블명: pybo_question, pybo_answer 테이블 생성


작업 시작

1. question_detail.py 코드를 전부 삭제(혹은 주석)
2. question_detail.py 에 코드 작성
{% load static %}
<link rel="stylesheet" type="text/css" href="{% static 'bootstrap.min.css' %}">
<div class="container my-3">
    <!-- 질문 -->
    <h2 class="border-bottom py-2">{{ question.subject }}</h2>
    <div class="card my-3">
        <div class="card-body">
            <div class="card-text" style="white-space: pre-line;">{{ question.content }}</div>
            <div class="d-flex justify-content-end">
                <div class="badge bg-light text-dark p-2">
                    {{ question.create_date }}
                </div>
            </div>
        </div>
    </div>
<!-- 답변 -->
    <h5 class="border-bottom my-3 py-2">{{question.answer_set.count}}개의 답변이 있습니다.</h5>
    {% for answer in question.answer_set.all %}
    <div class="card my-3">
        <div class="card-body">
            <div class="card-text" style="white-space: pre-line;">{{ answer.content }}</div>
            <div class="d-flex justify-content-end">
                <div class="badge bg-light text-dark p-2">
                    {{ answer.create_date }}
                </div>
            </div>
        </div>
    </div>
    {% endfor %}

<!-- 답변 등록 -->
    <form action="{% url 'pybo:answer_create' question.id %}" method="post" class="my-3">
        {% csrf_token %}
        <div class="mb-3">
            <label for="content" class="form-label">답변내용</label>
            <textarea name="content" id="content" class="form-control" rows="10"></textarea>
        </div>
        <input type="submit" value="답변등록" class="btn btn-primary">
    </form>
</div>

2.1. https://getbootstrap.com/docs/5.1/components/card/
위 주소에 있는 부트스트랩을 참고하여 어떻게 꾸며졌는지 보면됨. 
다만 우리 과정에서는 중요하지는 않다고 볼 수 있음
+ 웹 표준 html 구조라는 것이 있음
- 어느 프로그램으로 보더라도 항상 동일하게 볼 수 있는 구조를 갖추는 것임.
아래는 예시 코드임

<!doctype html>
<html lang="ko">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <link rel="stylesheet" type="text/css" href="/static/bootstrap.min.css">
    <title>Hello, pybo!</title>
</head>
<body>
(... 생략 ...)
</body>
</html>


템플릿 상속
1. templates 폴더에 base.html 파일 생성 후 코드 작성
{% load static %}
<!doctype html>
<html lang="ko">
<head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <!-- Bootstrap CSS -->
    <link rel="stylesheet" type="text/css" href="{% static 'bootstrap.min.css' %}">
    <!-- pybo CSS -->
    <link rel="stylesheet" type="text/css" href="{% static 'style.css' %}">
    <title>Hello, pybo!</title>
</head>
<body>
<!-- 기본 템플릿 안에 삽입될 내용 Start -->
{% block content %}
{% endblock %}
<!-- 기본 템플릿 안에 삽입될 내용 End -->
</body>
</html>

2. question_list.html 파일에서 코드 수정
{load...}와 link 태그 삭제(혹은 주석) 이후
{% extends 'base.html' %} 
{% block content %}
위 두 코드를 최상단(주석이 있다면 주석보다 위로 배치해야 에러가 안 나옴),
{% endblock %} 을 최하단에 작성

위와 같이 작성되면 표준 html 문서라고 할 수 있음
3. question_detail파일도 2번과 동일하게 작업.
위와 같은 작업을 하는 것이 '웹 표준 문서'임.
4. style.css 코드는 중복되므로 내용 삭제(혹은 주석)


질문하기 버튼 추가할 것임(127.0.0.1:8000/pybo 에 생성)
(질문 리스트 페이지)에서 질문버튼 -> 질문 페이지 -> 질문 리스트 페이지=새로 등록된 질문이 인덱스 1번이 돼야함
코드 순서
1) question_list에 질문하기 버튼 생성
2) 질문버튼 -> 질문작성 페이지 url 매핑
Question 모델 사용
3) 질문 저장 -> question_list를 다시 읽기
기타 고려사항 : 필수 항목 설정

질문 리스트 화면에서 질문하기 기능
1. question_list.html에서 </table> 태그 밑에 코드 추가
<a href="{% url 'pybo:question_create' %}">질문 등록하기</a>
2. pybo/urls.py에 path 추가
path('question/create/', views.question_create, name='question_create')
3. forms.py 파일생성 및 코드 작성
from django import forms
from .models import Question
class QuestionForm(forms.ModelForm): # 모델폼
    class Meta: # 모델폼을 생성하면 반드시 필요한 클래스임
        model = Question
        fields = ['subject', 'content'] # QuestionForm 모델폼에서 사용할 Question 모델의 속성

4. views.py 파일에 코드 추가
from pybo.forms import QuestionForm
def question_create(request):
    form=QuestionForm()    
    return render(request, 'pybo/question_form.html', {'form':form})
5. templates/pybo 폴더 안에 question_form.html 생성 후 코드 작성
{% extends 'base.html' %}
{% block content%}
<div>
    <h5>질문등록하기</h5>
    <button type="submit">저장하기</button>
</div>
{% endblock %}
6. 확인 후 디자인 변경을 위해 div 태그부터 코드 3줄을 아래 코드로 수정
<div class="container">
    <h5 class="my-3 border-bottom pb-2">질문등록</h5>
    <button type="submit" class="btn btn-primary">저장하기</button>
7. h5태그 밑에 코드 추가
    {{form.as_p}}
8. 확인하기 (129.0.0.1:8000/pybo 부터 버튼과 모든 페이지 이동까지 되야함.)
9. question_form파일에 form 태그 추가 
<form method="post">
{{csrf_token}}
{{form.as_p}}   <!-- form을 전달받아서 html코드를 생성-->
<button type="submit" class="btn btn-primary">저장하기</button>
</form>
10. 9번까지 완료되었으면 다시 테스트
페이지 이동 및 질문등록 페이지에서 저장하기 버튼 누르면 글이 사라지는지 확인
(실제 등록은 아직임)
11. views.py 파일에서 question_create 함수 수정
def question_create(request):
    if request.method == 'POST': # post방식 -> (작성된 질문)저장하기
        form = QuestionForm(request.POST)
        if form.is_valid(): # 폼에 값이 올바르게 저장되었다면
            question = form.save(commit=False) # 임시저장
            question.create_date = timezone.now() # 작성일자 저장
            question.save()
            return redirect('pybo:index')
    else: # get방식 -> 초기화면에서 '질문등록하기' 누른 상황 -> 질문폼
        form = QuestionForm()
    return render(request, 'pybo/question_form.html', {'form':form})

-----5일차(휴가)-----
네비게이션바, 페이지네이션 작업한듯
-------- 6일차 ---------
APS(삼성에서 하는)라는 것이 있다고 함.
로그인 회원가입 등